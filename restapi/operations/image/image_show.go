// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ImageShowHandlerFunc turns a function with the right signature into a image show handler
type ImageShowHandlerFunc func(ImageShowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageShowHandlerFunc) Handle(params ImageShowParams) middleware.Responder {
	return fn(params)
}

// ImageShowHandler interface for that can handle valid image show params
type ImageShowHandler interface {
	Handle(ImageShowParams) middleware.Responder
}

// NewImageShow creates a new http.Handler for the image show operation
func NewImageShow(ctx *middleware.Context, handler ImageShowHandler) *ImageShow {
	return &ImageShow{Context: ctx, Handler: handler}
}

/*ImageShow swagger:route GET /images/{imageId} image imageShow

Shows the image

*/
type ImageShow struct {
	Context *middleware.Context
	Handler ImageShowHandler
}

func (o *ImageShow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewImageShowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
